priority -50

extends html





snippet t "" w
$this->
endsnippet

snippet [
$${1}['${2}']${0}
endsnippet

snippet sqli
$req = $bdd->prepare("INSERT INTO ${1} (${2}) VALUES (`!p snip.rv = get_sql_repls(t[2]) `)");
$req->execute(`!p get_pdo_array(snip, t[2]) `);
endsnippet

snippet sqls
$req = $bdd->prepare("SELECT ${1:*} FROM ${2} WHERE ${3}");
$req->execute(`!p get_select_pdo_array(snip, t) `);
endsnippet

snippet pre
echo '<pre>';
endsnippet

snippet pres
echo '<pre style="font-family:monospace">';
${VISUAL}${0}
echo '</pre>';
endsnippet

snippet pr
print_r(${1});${0}
endsnippet

snippet vd
var_dump($1);$0
endsnippet

snippet e
echo "${1}";${0}
endsnippet

snippet el
echo "${1}\n";${0}
endsnippet

snippet eb
echo "${1}<br>\n";${0}
endsnippet

snippet ctr
public function __construct($1) {
	$0
}

endsnippet

snippet ns
namespace $1;$0
endsnippet

snippet single
static \$$1 = null;
if (is_null(\$$1)) {
	\$$1 = $2;
}
return \$$1;
endsnippet

snippet try
try {
	$1${VISUAL}
}
catch (${2:\Throwable} $e) {$3
}$0
endsnippet

snippet t=
$this->$1 = \$$1;$0
endsnippet

snippet ife
if (empty($1)) {
	${VISUAL}$2
}$0
endsnippet

snippet ifn
if (is_null($1)) {
	${VISUAL}$2
}$0
endsnippet

snippet ifne
if (!empty($1)) {
	${VISUAL}$2
}$0
endsnippet

snippet ifnn
if (!is_null($1)) {
	${VISUAL}$2
}$0
endsnippet

snippet nu "is_null()" iw
is_null($1)$0
endsnippet

snippet nnu "!is_null()" iw
!is_null($1)$0
endsnippet

snippet haspost "" iw
isset($_POST['$1'])$0
endsnippet

snippet hasget "" iw
isset($_GET['$1'])$0
endsnippet

snippet hassession "" iw
isset($_SESSION['$1'])$0
endsnippet





global !p
def get_sql_repls(vals):
    repl_arr = []
    for v in vals.split(','):
        vs = v.strip()
        if vs == '': continue
        repl_arr.append(':'+vs)
    return ', '.join(repl_arr)

def get_pdo_array(snip, vals):
    valsStrip = vals.strip()
    if valsStrip == '': return
    
    snip.rv += 'array('
    snip >> 1
    first = True
    for v in vals.split(','):
        vs = v.strip()
        if vs == '': continue

        if first : first = False
        else : snip.rv += ','

        snip += "'"+vs+"' => ''"

    snip << 1
    snip += ')'


def get_select_pdo_array(snip, t):
	vars = []
	for i in range(1,4):
		vars.extend(re.findall(r':[A-Za-z]*', t[i]))
	if len(vars) == 0: return

	snip.rv += 'array('
	snip >> 1
	first = True
	for v in vars:
		if first : first = False
		else : snip.rv += ','
		snip += "'{}' => ''".format(v[1:])

	snip << 1
	snip += ')'


endglobal


## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "def"
define('${1}'${2});${3}
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1:public }function ${2:someFunc}(${3})
{${6}
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1:someClass}
{${4}
} // END interface $1"
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < $1; $$2${3:++}) {
	$4
}
endsnippet

snippet fek "foreachk"
foreach ($$1 as $$2 => $$3) {
	$4
}
endsnippet

snippet fkv "foreachk"
foreach ($$1 as $$2 => $$3) {
	$4
}
endsnippet

snippet get "get" iw
$_GET['${1}']${2}
endsnippet

snippet if "if"
if ($1) {
	${VISUAL}$2
}
endsnippet

snippet elif "elseif"
elseif (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post" iw
$_POST['${1}']${2}
endsnippet

snippet server "server" iw
$_SERVER['${1}']${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet session "session" iw
$_SESSION['${1}']${2}
endsnippet

#snippet t "t"
#$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
#endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}() {
	return $this->$1;$2
}$0
endsnippet

snippet setter "PHP Class Setter" b
/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1) {
	$this->$1 = $$1;$3
	${4:return $this;}
}$0
endsnippet

snippet g "PHP Class Getter, no doc" b
public function get${1/\w+\s*/\u$0/}() {
	return $this->$1;$2
}$0
endsnippet

snippet s "PHP Class Setter, no doc" b
public function set${1/\w+\s*/\u$0/}($$1) {
	$this->$1 = $$1;$3
	${4:return $this;}
}$0
endsnippet

snippet gs "PHP Class Getter Setter" b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}()$2 {
	return $this->$1;
}

/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1) {
	$this->$1 = $$1;
	return $this;
}$0
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2})$3
{
	${VISUAL}${5}
}$0
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2})$3
{
	${VISUAL}${5}
}$0
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2})$3
{
	${VISUAL}${5}
}$0
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2})$3
{
	${VISUAL}${5}
}$0
endsnippet

snippet pros "Protected static function" b
protected static function ${1:name}(${2})$3
{
	${VISUAL}${5}
}$0
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2})$3
{
	${VISUAL}${5}
}$0
endsnippet

snippet fun "Function snip" b
function ${1}(${2})$3
{
	${VISUAL}$0
}
endsnippet

snippet fe "Foreach loop"
foreach ($$1 as $$3) {
	${VISUAL}${4}
}$0
endsnippet

snippet new "New class instance" b
$$1 = new $1($2);
$0
endsnippet

snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...}
} else {
	${3:// code...}
}
$0
endsnippet

snippet class "Class declaration template" b
class ${2:`!p snip.rv=snip.fn.split('.')[0]`}
{
	public function ${4:__construct}($5)
	{
		$0
	}
}

endsnippet

snippet interface "interface declaration template" b
interface ${2:`!p snip.rv=snip.fn.split('.')[0]`}
{
	$0
}

endsnippet

snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
$0
endsnippet

snippet ve "Dumb debug helper in HTML"
    echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

# Symfony 2 based snippets
snippet sfa "Symfony 2 Controller action"
/**
* @Route("/${1:route_name}", name="$1")
* @Template()
*/
public function $1Action($2)
{
	$3
	return ${4:array();}$0
}
endsnippet

snippet inheritdoc "@inheritdoc docblock"
/**
 * {@inheritdoc}
 */
endsnippet

# :vim:ft=snippets:
