priority -50




snippet mod "module class definition"


class `!v fnamemodify(@%, ':t:r')` {
	/**
	 * Constructor.
	 */
	constructor() {
	}
}


module.exports = `!v fnamemodify(@%, ':t:r')`;

endsnippet


snippet t "" iw
this.
endsnippet

snippet t= "" iw
this.$1 = $1;$0
endsnippet


snippet nu? "not undefined ? ... : ..." iw
$1 !== undefined ? $1 : $2
endsnippet

snippet a "is array" iw
Array.isArray($1)$0
endsnippet

snippet o "is object" iw
typeof $1 === 'object'$0
endsnippet

snippet f "is function" iw
typeof $1 === 'function'$0
endsnippet

snippet n "is number" iw
typeof $1 === 'number'$0
endsnippet

snippet b "is boolean" iw
typeof $1 === 'boolean'$0
endsnippet

snippet s "is string" iw
typeof $1 === 'string'$0
endsnippet

snippet u "is undefined" iw
$1 === undefined$0
endsnippet

snippet na "is not array" iw
!Array.isArray($1)$0
endsnippet

snippet no "is not object" iw
typeof $1 !== 'object'$0
endsnippet

snippet nf "is not function" iw
typeof $1 !== 'function'$0
endsnippet

snippet nn "is not number" iw
typeof $1 !== 'number'$0
endsnippet

snippet nb "is not boolean" iw
typeof $1 !== 'boolean'$0
endsnippet

snippet ns "is not string" iw
typeof $1 !== 'string'$0
endsnippet

snippet nu "is defined" iw
$1 !== undefined$0
endsnippet

snippet jt "jquery $(this)." iw
$(this).
endsnippet

snippet last "last array element" iw
${1}[$1.length-1]${0}
endsnippet

snippet # "jquery $('#...')" iw
$('#${1}')${0}
endsnippet

snippet $ "jquery $(...)" iw
$(${1})${0}
endsnippet

snippet itt "" iw
input[type="text"]
endsnippet

snippet ith "" iw
input[type="hidden"]
endsnippet

snippet ifu "if undefined"
if (typeof(${1}) === 'undefined')${0}
endsnippet

snippet tu "type == undefined"
typeof(${1}) === 'undefined'${0}
endsnippet

snippet ifd "if defined"
if (typeof(${1}) !== 'undefined')${0}
endsnippet

snippet td "type != undefined"
typeof(${1}) !== 'undefined'${0}
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}' : function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name} : function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name} : ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key} : ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet foro "for (let ... of ...) {...}" b
for (let ${1} of ${2}) {
	${VISUAL}$0
}
endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0; $1 != $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet forl "for (...) {...} (counting up)" b
for (let ${1:i} = 0; $1 != $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet fori "for (...) {...} (counting up)" b
for (let i = 0; i != $1; i++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "Function snip" b
function ${1}(${2})
{
	${VISUAL}$0
}
endsnippet

snippet pfun "Function in proto snip" b
${1}: function(${2})
{
	${VISUAL}$0
},
endsnippet

#snippet fun "Function snip" b
#//******************** function $1($2)
#function ${1}(${2})
#{
#	${VISUAL}$0
#}
#endsnippet
#
#snippet pfun "Function in proto snip" b
#//******************** $1: function($2)
#${1}: function(${2})
#{
#	${VISUAL}$0
#},
#endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${2://code}
} else {
	${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet sto "setTimeout function"
setTimeout(() => {
	${VISUAL}$0
}, ${1:1000});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cclear "console.clear" b
console.clear();
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet cgroup "console.group" b
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cl "console.log"
console.log(${1:'${2:value}'});
endsnippet

snippet cd "console.debug"
console.debug(${1:"${2:value}"});
endsnippet

snippet cprof "console.profile" b
console.profile("${1:label}");
${VISUAL}$0
console.profileEnd();
endsnippet

snippet ctable "console.table" b
console.table(${1:"${2:value}"});
endsnippet

snippet ctime "console.time" b
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp("${1:label}");
endsnippet

snippet ctrace "console.trace" b
console.trace();
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"});
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

snippet rq "Node.js require"
const ${1} = require('$1');
endsnippet

snippet rql "Node.js require local"
const ${1} = require('./$1');
endsnippet

# vim:ft=snippets:
