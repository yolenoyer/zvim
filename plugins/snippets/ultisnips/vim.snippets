priority -50


###########################################################################
#                            SnipMate Snippets                            #
###########################################################################
snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1${3}
endsnippet

snippet fun "function" b
"'''''''''''''''''''' function! $1($2)
function! ${1}(${2})
	${0}
endf
endsnippet

snippet funcom "function + command" b
"''''''''''''''''''''     function! s:$1($2)
function! s:${1}(${2})
	${0}
endf

command! -nargs=* `!p snip.rv=CamelCase(t[1])` call s:$1(<f-args>)
endsnippet

snippet aug "augroup" b
augroup ${1}
	au!
	${VISUAL}${0}
augroup end
endsnippet

snippet savepos "Save/restore cursor pos in a function" b
let l:save_cursor = getcurpos()
${VISUAL}${0}
call setpos('.', l:save_cursor)
endsnippet

snippet savereg "Save/restore register in a function" b
let l:save_reg_${1} = @$1
${VISUAL}${0}
let @$1 = l:save_reg_$1
endsnippet

snippet savereg/ "Save/restore register @/ in a function" b
let l:save_reg_search = @/
${VISUAL}${0}
let @/ = l:save_reg_search
endsnippet

snippet savereg" "Save/restore unnamed register in a function" b
let l:save_reg_unnamed = @"
${VISUAL}${0}
let @" = l:save_reg_unnamed
endsnippet

snippet savemark "Save/restore a mark in a function" b
let l:save_mark_${1} = getpos("'$1")
${VISUAL}${0}
call setpos("'$1", l:save_mark_$1)
endsnippet

snippet savemark< "Save/restore the marks '< and '> in a function" b
let l:save_mark_visual_start = getpos("'<")
let l:save_mark_visual_end = getpos("'>")
${VISUAL}${0}
call setpos("'<", l:save_mark_visual_start)
call setpos("'>", l:save_mark_visual_end)
endsnippet

# vim:ft=snippets:
